


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; next to run threa
                                                            d
   14 00000000                 EXTERN           StackPt     ; stack of currentl
                                                            y running thread
   15 00000000         
   16 00000000                 EXPORT           StartOS
   17 00000000                 EXPORT           ContextSwitch
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000                 EXPORT           SVC_Handler
   20 00000000         
   21 00000000         
   22 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   23 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   24 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   25 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   26 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   28 00000000         
   29 00000000         
   30 00000000         StartOS



ARM Macro Assembler    Page 2 


   31 00000000         ; put your code here
   32 00000000 B672            CPSID            I
   33 00000002 4826            LDR              R0, =StackPt ;R0 has the addres
                                                            s of the address of
                                                             StackPt
   34 00000004 6800            LDR              R0, [R0]
   35 00000006 F8D0 D000       LDR              SP, [R0]    ;SP has TCB stackPt
                                                            r
   36 0000000A E8BD 0FF0       POP              {R4-R11}
   37 0000000E BC0F            POP              {R0-R3}
   38 00000010 B001            ADD              SP, SP, #4  ;manually move SP t
                                                            o LR
   39 00000012 F85D EB04       POP              {LR}
   40 00000016 B001            ADD              SP, SP, #4  ;skip over PC and P
                                                            SR
   41 00000018 B662            CPSIE            I
   42 0000001A 4770            BX               LR          ; start first threa
                                                            d
   43 0000001C         
   44 0000001C         OSStartHang
   45 0000001C E7FE            B                OSStartHang ; Should never get 
                                                            here
   46 0000001E         
   47 0000001E         
   48 0000001E         ;*******************************************************
                       *************************************************
   49 0000001E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   50 0000001E         ;                                           void Context
                       Switch(void)
   51 0000001E         ;
   52 0000001E         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   53 0000001E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   54 0000001E         ;*******************************************************
                       *************************************************
   55 0000001E         
   56 0000001E         ContextSwitch
   57 0000001E         ; edit this code
   58 0000001E         
   59 0000001E 4770            BX               LR
   60 00000020         
   61 00000020         
   62 00000020         ;*******************************************************
                       *************************************************
   63 00000020         ;                                         HANDLE PendSV 
                       EXCEPTION
   64 00000020         ;                                     void OS_CPU_PendSV
                       Handler(void)
   65 00000020         ;
   66 00000020         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   67 00000020         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   68 00000020         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   69 00000020         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception



ARM Macro Assembler    Page 3 


   70 00000020         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   71 00000020         ;              a thread or occurs due to an interrupt or
                        exception.
   72 00000020         ;
   73 00000020         ;           2) Pseudo-code is:
   74 00000020         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   75 00000020         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   76 00000020         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   77 00000020         ;              d) Call OSTaskSwHook();
   78 00000020         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   79 00000020         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   80 00000020         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   81 00000020         ;              h) Restore R4-R11 from new process stack;
                       
   82 00000020         ;              i) Perform exception return which will re
                       store remaining context.
   83 00000020         ;
   84 00000020         ;           3) On entry into PendSV handler:
   85 00000020         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   86 00000020         ;                 xPSR, PC, LR, R12, R0-R3
   87 00000020         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   88 00000020         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   89 00000020         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
   90 00000020         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
   91 00000020         ;
   92 00000020         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
   93 00000020         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
   94 00000020         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
   95 00000020         ;*******************************************************
                       *************************************************
   96 00000020         
   97 00000020         PendSV_Handler
   98 00000020         ; put your code here
   99 00000020 B672            CPSID            I
  100 00000022 E92D 0FF0       PUSH             {R4-R11}
  101 00000026 481D            LDR              R0, =StackPt ; R0 has address o
                                                            f StackPt
  102 00000028 6800            LDR              R0, [R0]
  103 0000002A F8C0 D000       STR              SP, [R0]    ; save stack pointe
                                                            r into current TCB'
                                                            s stack pointer
  104 0000002E 481C            LDR              R0, =RunPt  ; R1 has address of
                                                             RunPt
  105 00000030 6801            LDR              R1, [R0]



ARM Macro Assembler    Page 4 


  106 00000032 F8D1 D000       LDR              SP, [R1]    ; SP has RunPt's st
                                                            ack pointer
  107 00000036 4919            LDR              R1, =StackPt ; R0 has the addre
                                                            ss of StackPt
  108 00000038 6800            LDR              R0, [R0]
  109 0000003A 6008            STR              R0, [R1]    ; save RunPt's stac
                                                            k pointer address i
                                                            nto StackPt var for
                                                             next context switc
                                                            h
  110 0000003C E8BD 0FF0       POP              {R4-R11}
  111 00000040 B662            CPSIE            I
  112 00000042 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  113 00000044         
  114 00000044         
  115 00000044         ;*******************************************************
                       *************************************************
  116 00000044         ;                                         HANDLE SVC EXC
                       EPTION
  117 00000044         ;                                     void OS_CPU_SVCHan
                       dler(void)
  118 00000044         ;
  119 00000044         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  120 00000044         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  121 00000044         ;           found relative to the return address saved o
                       n the stack on exception entry.
  122 00000044         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  123 00000044         ;*******************************************************
                       *************************************************
  124 00000044         
  125 00000044                 IMPORT           OS_Id
  126 00000044                 IMPORT           OS_Kill
  127 00000044                 IMPORT           OS_Sleep
  128 00000044                 IMPORT           OS_Time
  129 00000044                 IMPORT           OS_AddThread
  130 00000044         
  131 00000044         SVC_Handler
  132 00000044         ; put your Lab 5 code here
  133 00000044 F8DD C018       LDR              R12,[SP,#24]
  134 00000048 F83C CC02       LDRH             R12,[R12,#-2]
  135 0000004C F42C 4C7F       BIC              R12,#0xFF00
  136 00000050 E89D 000F       LDM              SP,{R0-R3}
  137 00000054         
  138 00000054 B500            PUSH             {LR}
  139 00000056 F1BC 0F00       CMP              R12, #0
  140 0000005A D00B            BEQ              SVC_Handler_OS_Id
  141 0000005C F1BC 0F01       CMP              R12, #1
  142 00000060 D00B            BEQ              SVC_Handler_OS_Kill
  143 00000062 F1BC 0F02       CMP              R12, #2
  144 00000066 D00B            BEQ              SVC_Handler_OS_Sleep
  145 00000068 F1BC 0F03       CMP              R12, #3
  146 0000006C D00B            BEQ              SVC_Handler_OS_Time
  147 0000006E F1BC 0F04       CMP              R12, #4
  148 00000072 D00B            BEQ              SVC_Handler_OS_AddThread



ARM Macro Assembler    Page 5 


  149 00000074         
  150 00000074         SVC_Handler_OS_Id
  151 00000074 F7FF FFFE       BL               OS_Id
  152 00000078 E00B            B                fin
  153 0000007A         SVC_Handler_OS_Kill
  154 0000007A F7FF FFFE       BL               OS_Kill
  155 0000007E E008            B                fin
  156 00000080         SVC_Handler_OS_Sleep
  157 00000080 F7FF FFFE       BL               OS_Sleep
  158 00000084 E005            B                fin
  159 00000086         SVC_Handler_OS_Time
  160 00000086 F7FF FFFE       BL               OS_Time
  161 0000008A E002            B                fin
  162 0000008C         SVC_Handler_OS_AddThread
  163 0000008C F7FF FFFE       BL               OS_AddThread
  164 00000090 E7FF            B                fin
  165 00000092         
  166 00000092         fin
  167 00000092 F85D EB04       POP              {LR}
  168 00000096 9000            STR              R0,[SP]
  169 00000098 4770            BX               LR          ; Return from excep
                                                            tion
  170 0000009A         
  171 0000009A         
  172 0000009A         
  173 0000009A 00 00           ALIGN
  174 0000009C                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab3 -I"C:\Users\Allen Zhang\AppDat
a\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include" -I"C:\Users\Allen Zhang\A
ppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123" --predefine=
"__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 531" --predefine="_RTE_
 SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\
osasm.lst ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 0000001E

Symbol: ContextSwitch
   Definitions
      At line 56 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
OSStartHang 0000001C

Symbol: OSStartHang
   Definitions
      At line 44 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 45 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 00000020

Symbol: PendSV_Handler
   Definitions
      At line 97 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 00000044

Symbol: SVC_Handler
   Definitions
      At line 131 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
SVC_Handler_OS_AddThread 0000008C

Symbol: SVC_Handler_OS_AddThread
   Definitions
      At line 162 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 148 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler_OS_AddThread used once
SVC_Handler_OS_Id 00000074

Symbol: SVC_Handler_OS_Id
   Definitions
      At line 150 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 140 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler_OS_Id used once
SVC_Handler_OS_Kill 0000007A

Symbol: SVC_Handler_OS_Kill



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 153 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 142 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler_OS_Kill used once
SVC_Handler_OS_Sleep 00000080

Symbol: SVC_Handler_OS_Sleep
   Definitions
      At line 156 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 144 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler_OS_Sleep used once
SVC_Handler_OS_Time 00000086

Symbol: SVC_Handler_OS_Time
   Definitions
      At line 159 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 146 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler_OS_Time used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
fin 00000092

Symbol: fin
   Definitions
      At line 166 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 152 in file ..\RTOS_Labs_common\osasm.s
      At line 155 in file ..\RTOS_Labs_common\osasm.s
      At line 158 in file ..\RTOS_Labs_common\osasm.s
      At line 161 in file ..\RTOS_Labs_common\osasm.s
      At line 164 in file ..\RTOS_Labs_common\osasm.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 129 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 163 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_AddThread used once
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 125 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 151 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Id used once
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 126 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 154 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Kill used once
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 127 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 157 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Sleep used once
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 128 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 160 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Time used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 104 in file ..\RTOS_Labs_common\osasm.s
Comment: RunPt used once
StackPt 00000000

Symbol: StackPt
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 33 in file ..\RTOS_Labs_common\osasm.s
      At line 101 in file ..\RTOS_Labs_common\osasm.s
      At line 107 in file ..\RTOS_Labs_common\osasm.s

7 symbols



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

361 symbols in table
